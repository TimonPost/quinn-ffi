initSidebarItems({"enum":[["FFIResultKind","Indicating a certain result kind."]],"fn":[["accept_stream","Accepts a stream."],["connect_client","Connects a client to some remote address."],["create_client_config","Creates and configures a client crypto configuration."],["create_client_endpoint","Creates a client endpoint with a certain configuration."],["create_server_config","Creates and configures a server crypto configuration."],["create_server_endpoint","Creates a server endpoint with a certain configuration."],["handle_datagram","Handles the given datagram."],["last_error","Retrieves the last occurred error."],["open_stream","Opens a stream with a certain directionality."],["poll_connection","Polls a given connection."],["read_stream","Reads from a stream."],["write_stream","Writes to a stream."]],"mod":[["callbacks","Callbacks that are invoked when events occure"],["safe_api","This module contains FFI handels and the ffi function generator macro. This API validates if pointers are null and catches panics. It also protects handle access with a mutex. It is more safe then the unsafe api however it introduces some extra logic to keep this safe which could come at a little performance cost."]],"struct":[["FFIResult","FFI safe result type."],["Out","Allocated but uninitialized memory serving as assignable `out` parameter."],["QuinnError","Error with code and reason."],["Ref","An initialized parameter passed by shared reference."],["RefMut","An initialized parameter passed by exclusive reference."]],"trait":[["HandleMut","A handle defines a type that is shared across the FFi boundary."],["HandleRef","A handle defines a type that is shared across the FFi boundary."],["IsNull","Whether or not a value passed across an FFI boundary is null."]]});